// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicLibraryECS.Core.Data;

#nullable disable

namespace MusicLibraryECS.Infrastructure.Migrations
{
    [DbContext(typeof(EcsDbContext))]
    [Migration("20250826124505_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("MusicLibraryECS.Core.Components.Component", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("Components");

                    b.HasDiscriminator<string>("ComponentType").HasValue("Component");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MusicLibraryECS.Core.Entities.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("MusicLibraryECS.Core.Components.AlbumComponent", b =>
                {
                    b.HasBaseType("MusicLibraryECS.Core.Components.Component");

                    b.Property<Guid>("ArtistEntityId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Album");
                });

            modelBuilder.Entity("MusicLibraryECS.Core.Components.ArtistComponent", b =>
                {
                    b.HasBaseType("MusicLibraryECS.Core.Components.Component");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Pseudonym")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("Artist");
                });

            modelBuilder.Entity("MusicLibraryECS.Core.Components.TrackArtistComponent", b =>
                {
                    b.HasBaseType("MusicLibraryECS.Core.Components.Component");

                    b.Property<Guid>("ArtistEntityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackEntityId")
                        .HasColumnType("TEXT");

                    b.ToTable("Components", t =>
                        {
                            t.Property("ArtistEntityId")
                                .HasColumnName("TrackArtistComponent_ArtistEntityId");
                        });

                    b.HasDiscriminator().HasValue("TrackArtist");
                });

            modelBuilder.Entity("MusicLibraryECS.Core.Components.TrackComponent", b =>
                {
                    b.HasBaseType("MusicLibraryECS.Core.Components.Component");

                    b.Property<Guid>("AlbumEntityId")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Components", t =>
                        {
                            t.Property("Title")
                                .HasColumnName("TrackComponent_Title");
                        });

                    b.HasDiscriminator().HasValue("Track");
                });

            modelBuilder.Entity("MusicLibraryECS.Core.Components.Component", b =>
                {
                    b.HasOne("MusicLibraryECS.Core.Entities.Entity", null)
                        .WithMany("Components")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicLibraryECS.Core.Entities.Entity", b =>
                {
                    b.Navigation("Components");
                });
#pragma warning restore 612, 618
        }
    }
}
